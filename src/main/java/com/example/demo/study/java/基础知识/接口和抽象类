接口
普通方法
默认方法
静态方法

public interface MyInterface {
    // 抽象方法
    void myMethod();

    // 静态方法
    static void staticMethod() {
        System.out.println("Static Method");
    }

    // 默认方法
    default void defaultMethod() {
        System.out.println("Default Method");
    }
}

//静态方法不用创建实例就可以直接调用 默认方法需要创建实例后调用

MyInterface.staticMethod(); // 调用静态方法
MyInterface myObj = new MyInterfaceImpl();
myObj.defaultMethod(); // 调用默认方法

抽象类
和普通类的区别是可以有抽象方法 子类继承父类必须重写抽象方法 是强制性的
也可以有普通的方法正常实现 可以选择性重写不重写

接口：使用interface关键字来定义。
抽象类：通过abstract class关键字进行定义。

interface接口里的方法默认是public abstract类型，且不能有方法体。
接口中的字段默认是public static final类型，必须在声明时就完成初始化。
从 Java 8 开始，接口支持定义默认方法和静态方法。
抽象类：
抽象类既可以包含抽象方法（没有方法体的方法），也能有具体方法（带有方法体的方法）。
抽象类中的字段可以是各种类型，并且可以在声明时初始化，也可以在构造方法中初始化。
继承规则
接口：一个类能够实现多个接口。
抽象类：一个类只能继承一个抽象类。
设计目的
接口：主要用于定义行为规范，它代表的是一种 “能做什么” 的能力。
抽象类：重点在于代码复用，它体现的是一种 “是不是” 的从属关系。